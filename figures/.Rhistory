for (idx in 1:ncol(data)){
class(idx)}
print(class(idx))}
for (idx in 1:ncol(data)){
print(class(idx))}
for (idx in 1:ncol(training)){
print(class(idx))}
head(training[,6])
head(training[,1:6])
head(training[,1:20])
summary(training$new_windiw)
summary(training$new_window)
head(training[,1:30])
head(training[,1:20],20)
is.null
sum(is.null(training))
summary(training$kurtosis_roll_belt)
summary(as.factor(training$kurtosis_roll_belt))
sum(training$kurtosis_roll_belt)
levels(training$kurtosis_roll_belt)
sum(as.numeric(training$kurtosis_roll_belt))
sum(training$kurtosis_roll_belt=="")
names(nonNAcolumns)
apply(training, 2, funtion(x) sum(x==""))
apply(training, 2, funtion(x) sum(x==""))
apply(training, 2, funtion(x) {sum(x=="")}
apply(training, 2, funtion(x) {sum(x=="")})
apply(training, 2, funtion(x) sum(is.na(x))
apply(training, 2, function(x) sum(x==""))
nonNAcolumns<-names(training)[apply(training, 2, function(x) sum(is.na(x)))<19216|
apply(training,2, function(x) sum(x==""))]
nonNAcolumns<-names(training)[apply(training, 2, function(x) sum(is.na(x)))<19216|
apply(training,2, function(x) sum(x=="")<19216)]
nonNAcolumns
?read.csv
training<-read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
na.strings=c(NA, ""))
test<-read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
na.strings=c(NA, ""))
head(trainin[,1:10, 20])
head(training[,1:10, 20])
head(training[,1:10],20)
head(training[,1:20],10)
apply(data, 2, function(x){sum(is.na(x))})
apply(training, 2, function(x){sum(is.na(x))})
nonNAcolumns<-names(training)[apply(training, 2, function(x) sum(is.na(x)))<19216]
nonNAcolumns
testing<-test[,nonNAcolumns[-length(nonNAcolumns)]]
dim(training)
?quantile
quantile(training[,20])
quantile(training[,30])
quantile(training[,40])
sum(is.na(training))
training
training<-training[,nonNAcolumns]
sum(is.na(training))
head(training[,1:10])
class(training$raw_timestamp_part_1)
summary(training$raw_timestamp_part_1)
summary(as.factor(training$raw_timestamp_part_1)
)
dim(training)
for (idx in 1:10) class(training$idx)
for (idx in 1:10) print(class(training$idx))
for (idx in 1:10) print(class(training[,idx]))
names(training)[1:10]
summary(training$X)
length(unique(X))
length(unique(training$X))
nrow(training)
training$X
tail(training$X)
summary(training$X)
class(train$X)
length(unique(training$X))
names(testing)
testing$X
training<-training[,-1]
testing<-testing[,-1]
names(training)
head(training)[1:10]
for (idx in 1:10) print(class(training[,idx]))
summary(training)
apply(training[2:ncol(training), 2, max])
apply(training[2:ncol(training)], 2, max)
with(training, table(classe, new_window))
levels(training[,3])
class(training[,3])
head(training[,1:7])
levels(training[,4])
levels(training[,1])
head(training$names)
head(names(training)
)
with(training, table(user_name, cvtd_timestamp))
with(training, table(user_name, cvtd_timestamp))
names(training)
training<-training[,-4]
testing<-testing[-4]
dim(training)
dim(testing)
head(training)
for (idx in 1:10) print(class(training[,idx]))
summary(as.factor(training[,2]))
library(caret)
## there are a large number of blank spaces that should be interpreted as NAs
training<-read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
na.strings=c(NA, ""))
test<-read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
na.strings=c(NA, ""))
## partitioning the data set
## K-FOLDS CROSS-VALIDATION. EL TEST SET SERÁ EL DEL SUBMIT DE COURSERA
## EXPLORATORY ANALYSIS
## Missing values
sum(is.na(data))
## columns with missing values
apply(training, 2, function(x){sum(is.na(x))})
## there are several columns all with a number of NAs equal to 19216, that is about only
## 2% of the number of observations.
nonNAcolumns<-names(training)[apply(training, 2, function(x) sum(is.na(x)))<19216]
training<-training[,nonNAcolumns]
## the same for the testing set. We have to drop "classe" from nonNAcolumns vector first
testing<-test[,nonNAcolumns[-length(nonNAcolumns)]]
## Dropping the first column, X, since it is an identifier of an observation
training<-training[,-1]
testing<-testing[,-1]
names(training)[1:10]
with(training, table(raw_timestamp_part1, cvtd_timestamp))
with(training, table(raw_timestamp_part_1, cvtd_timestamp))
names(training)[1:10]
training<-training[,-2:4]
testing<-testing[-2:4]
training<-training[,-c(2:4)]
testing<-testing[-c(2:4)]
names(training)
head(training)
pwd
pwd()
pvd
pdf
pdw()
?pdf
?pngg
?png
png("C:/Users/martin/Desktop/Data Science/Practical Machine learning/project")
figure_path<-png("C:/Users/martin/Desktop/Data Science/Practical Machine learning/project")
library(ggplot2)
qplot(training[,4], geom="box")
qplot(training[,4])
head(training)
figure_path<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project"
png
?pdf
dev()
dev.set()
dev.off()
names(training)
figure_path<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project"
for (idx in 3:ncol(training)-1){
png(paste(figure_path, idx, ".png" sep=""))
qplot(training[, idx], title=paste("Histogram column", idx))
dev.off()
}
figure_path<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project"
for (idx in 3:ncol(training)-1){
png(paste(figure_path, idx, ".png", sep=""))
qplot(training[, idx], title=paste("Histogram column", idx))
dev.off()
}
?qplot
png(paste(figure_path,"1",".png", sep=""))
qplot(training[,6])
qplot(training[,9])
dev.set()
dev.off()
figure_path<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures"
for (idx in 3:ncol(training)-1){
png(paste(figure_path, idx, ".png", sep=""))
qplot(training[, idx], title=paste("Histogram column", idx))
dev.off()
}
setwd("C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures")
getwd()
figure_path<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures"
for (idx in 3:ncol(training)-1){
png(paste(figure_path, "/",idx, ".png", sep=""))
qplot(training[, idx], title=paste("Histogram column", idx))
dev.off()
}
dev.set()
qplot(training[,4])
qplot(training[,4], title="hola")
qplot(training[,5], title="hola")
qplot(log(training[,5]), title="hola")
figure_path<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures"
for (idx in 3:ncol(training)-1){
png(paste(figure_path, "/",idx, ".png", sep=""))
qplot(training[, idx])
dev.off()
}
png("hola")
png("hola.png")
qplot(training[,5])
dev.off()
dev.off()
dev.off()
for (idx in 3:ncol(training)-1){
png(paste(figure_path, "/",idx, ".png", sep=""))
qplot(training[, idx])
graphics.off()
}
dev.set()
dev.new()
dev.set()
dev.off8)
dev.off())
dev.off()
for (idx in 3:ncol(training)){
png(paste(figure_path, "/",idx, ".png", sep=""))
qplot(training[, idx])
dev.off()
}
qplot(training[,5], title="hola")
for (idx in 3:ncol(training)){
png(paste(figure_path, "/",idx, ".png", sep=""))
par(ask = TRUE)
qplot(training[, idx])
dev.off()
}
for (idx in 3:ncol(training)){
png(paste(figure_path, "/",idx, ".png", sep=""))
par(ask = TRUE)
qplot(x[,idx]<-training[, idx])
dev.off()
}
for (idx in 3:ncol(training)){
png(paste(figure_path, "/",idx, ".png", sep=""))
print(qplot(training[, idx]))
dev.off()
}
ggplot(training, aes(factor(classe)))
g<-ggplot(training, aes(factor(classe), training[,5])
)
g<-ggplot(training, aes(factor(classe)), training[,5])
g+geom.boxplot
g+geom_boxplot()
names(training)
g<-ggplot(training, aes(factor(classe)), roll_arm)
g+geom_boxplot()
qplot(classe, training[,5], data=training, geom="boxplot" )
for (idx in 3:ncol(training)){
png(paste(figure_path, "/",idx, ".png", sep=""))
print(qplot(classe, training[, idx], data=trainng, geom="boxplot"))
dev.off()
}
figure_path<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures/boxplots"
for (idx in 3:ncol(training)){
png(paste(figure_path, "/",idx, ".png", sep=""))
print(qplot(classe, training[, idx], data=training, geom="boxplot"))
dev.off()
}
dev.off()
dev.off()
curve(1+x+x^2+x^3)
curve(4*x^3)
?curve
curve(4*x^3, xlim=c(0,100))
?curve
curve(4*x^3, xlim=c(0,100), add=T)
curve(4*x^3, xlim=c(0,100))
curve(4*x^3, xlim=c(0,4))
curve(1+x+x^2+x^3, xlim=c(0,10))
curve(4*x^3, xlim=c(0,4), add=T)
curve(1+x+x^2+x^3, xlim=c(0,10))
curve(4*x^3, add=T)
curve((1+2+4+8)*x^3, add=T)
curve(1+x+x^2+x^3, xlim=c(0,10))
curve((1+2+4+8)*x^3, add=T)
curve(1+x+x^2+x^3, xlim=c(0,10))
curve(4*x^3, add=T)
curve(1+x+x^2+x^3, xlim=c(0,10))
curve(3.5*x^3, add=T)
curve(1+x+x^2+x^3, xlim=c(0,10))
curve(1.875*x^3, add=T)
curve(1+x+x^2+x^3, xlim=c(0,3))
curve(1.875*x^3, add=T)
curve(1+x+x^2+2*x^3, xlim=c(0,3))
23/8
curve(2.875*x^3, add=T)
0.9*3+5
3*1.1+5
8*1.1
curve(3*x+5)
curve(3*x+5, xlim=c(0,10))
curve(8*x, add=T
)
abline(v=1)
abline(v=1, col="red")
curve(7*x, add=T)
curve(3*x, add=T)
curve(4*x, add=T)
curve(5*x, add=T)
curve(3*x+5, xlim=c(0,10))
curve(3*x, add=T)
abline(v=1, col="red")
curve(8*x, add=T)
qplot(training[,10], aes(training[,ncol(training)], data=training))
qplot(training[,10], data=training))
qplot(training[,10], data=training)
qplot(training[,5], data=training)
qplot(training[,5], data=training, colour=training[,ncol(training))
qplot(training[,5], data=training, colour=training[,ncol(training)])
head(names(training))
qplot(classe, data=training, colour=num_window)
qplot(training[,5], data=training, colour=num_window)
qplot(training[,5], data=training)
head(names(training))
qplot(training[,5], data=training, color=new_window)
qplot(training[,5], data=training, aes(color=new_window)
)
qplot(training[,5], data=training, fill=new_window)
qplot(training[,6], data=training, fill=new_window)
qplot(training[,6], data=training, fill=classe)
qplot(training[,6], data=training, fill=new_window)
qplot(training[,7], data=training, fill=new_window)
qplot(training[,8], data=training, fill=new_window)
table(training[,"new_window"])
with(training, table(classe, new_window))
?table
with(training, table(classe, new_window)/nrow(trainiing))
with(training, table(classe, new_window)/nrow(training))
round(with(training, table(classe, new_window)/nrow(training)),2)
table_classe_window<-with(training, table(classe, new_window)/nrow(training))
apply(table_classe_window, 1, function(x) x/length(x))
table_classe_window/rowSums(table_classe_window)
qplot(training[,5])
qplot(training[,5], facets=classe~., data=training)
qplot(training[,5], facets=classe~., data=training, fill=new_window)
qplot(training[,6], facets=classe~., data=training, fill=new_window)
qplot(training[,7], facets=classe~., data=training, fill=new_window)
qplot(training[,7], facets=classe~., data=training, fill=classe)
qplot(training[,7], facets=classe~., data=training, fill=new_window)
qplot(training[,7]^2, facets=classe~., data=training, fill=new_window)
class(training)
colClass
classCol
lapply(training, class)
sapply(training, class)
summary(training[,sapply(training, class)=="integer"])
levels(training$classe)
qplot(classe, data=training, fill=classe)
qplot(training[,5], data=training, fill=classe)
figure_extreme<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures/extreme"
for (idx in 3:ncol(training)-1){
png(paste(figure_extreme, "/", idx, ".png", sep=""))
plot(hist[,idx])
}
for (idx in 3:ncol(training)-1){
png(paste(figure_extreme, "/", idx, ".png", sep=""))
plot(training[,idx])
}
dev.set()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off8)
dev.off8)
dev.off()
dev.off()
dev.off8)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off8)
dev.off(O)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off8
dev.off()
rep(dev.off(), 10)
dev.off()
for (idx in 1:10) dev.off()
for (idx in 1:10) dev.off()
dev.set()
for (idx in 1:10) dev.off()
dev.set
dev.set()
for (idx in 1:10) dev.off()
dev.set()
figure_extreme<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures/extreme"
for (idx in 3:ncol(training)-1){
png(paste(figure_extreme, "/", idx, ".png", sep=""))
plot(training[,idx], col=training$classe)
dev.off()
}
figure_histClass<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures/histclass"
for (idx in 3:ncol(training)){
png(paste(figure_path, "/", idx, ".png", sep=""))
print(qplot(training[,idx], data=training, fill=classe))
dev.off()
}
figure_path<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures/boxplots"
for (idx in 3:ncol(training)){
png(paste(figure_path, "/",idx, ".png", sep=""))
print(qplot(classe, training[, idx], data=training, geom="boxplot"))
dev.off()
}
figure_histClass<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures/histclass"
for (idx in 3:ncol(training)){
png(paste(figure_histclass, "/", idx, ".png", sep=""))
print(qplot(training[,idx], data=training, fill=classe))
dev.off()
}
figure_histClass<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures/histclass"
for (idx in 3:ncol(training)){
png(paste(figure_histClass, "/", idx, ".png", sep=""))
print(qplot(training[,idx], data=training, fill=classe))
dev.off()
}
summary(training[,34])
which.min(training[,34])
training[,5373]
training[5373,]
modFit1<-train(classe~., data=training, trControl=trainControl("cv"), method="rpart")
modfit1
modFit1
?train
names(modelFIt1)
names(modelFit1)
names(modFit1)
modFit1<-train(classe~., data=training, trControl=fitControl, method="rpart")
modFit1<-train(classe~., data=training,  preProc = c("center", "scale"),
trControl=trainControl("cv"), method="rpart")
modFit1<-train(classe~., data=training,
trControl=trainControl(method="cv"), method="rpart")
modFIt1
modFit1
modFit1<-train(classe~., data=training, method="rpart")
mosFit1
modFit1
modFit1$finalModel
names(training)
predict(modFit1)
predict(modFit1,training)
predict(modFit1,training)==training$classe
sum(predict(modFit1,training)==training$classe)/nrow(training)
summary(training[,34])
training[which.min(training[,34])]
training[which.min(training[,34]),]
training[-which.min(training[,34]),]
summary(training[,35])
summary(training[,36])
training[,37]
summary(training[,37])
summary(training[,41])
summary(training[,46])
summary(training[,47])
summary(training[,48])
summary(training[,49])
c(which.min(training[,34]),
which.max(training[,35]),
which.max(training[,36]),
which.max(training[,37]),
which.min(training[,41]),
which.max(training[,46]),
which.min(training[,47]),
which.max(training[,48]),
which.max(training[,49]))
extreme.obs<-c(which.min(training[,34]),
which.max(training[,35]),
which.max(training[,36]),
which.max(training[,37]),
which.min(training[,41]),
which.max(training[,46]),
which.min(training[,47]),
which.max(training[,48]),
which.max(training[,49]))
unique(extreme.obs)
training<-training[-unique(exreme.obs),]
training<-training[-unique(extreme.obs),]
dim(training)
figure_path<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures"
for (idx in 3:ncol(training)){
png(paste(figure_path, "/",idx, ".png", sep=""))
print(qplot(training[, idx]))
dev.off()
}
figure_path<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures/boxplots"
for (idx in 3:ncol(training)){
png(paste(figure_path, "/",idx, ".png", sep=""))
print(qplot(classe, training[, idx], data=training, geom="boxplot"))
dev.off()
}
figure_histClass<-"C:/Users/martin/Desktop/Data Science/Practical Machine learning/project/figures/histclass"
for (idx in 3:ncol(training)){
png(paste(figure_histClass, "/", idx, ".png", sep=""))
print(qplot(training[,idx], data=training, fill=classe))
dev.off()
}
modFit1<-train(classe~., data=training, method="rpart")
sum(predict(modFit1,training)==training$classe)/nrow(training)
modFit1<-train(classe~., data=training, method="rpart", preProcess0c("center", "scale"))
modFit1<-train(classe~., data=training, method="rpart", preProcess=c("center", "scale"))
modFit1
sum(predict(modFit1,training)==training$classe)/nrow(training)
